package com.generation.blogpessoal.controller;

import com.generation.blogpessoal.model.Usuario;
import com.generation.blogpessoal.repository.UsuarioRepository;
import com.generation.blogpessoal.service.UsuarioService;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
/* A anota√ß√£o @SpringBootTest indica que a Classe UsuarioControllerTest √© uma Classe Spring Boot Testing.
A Op√ß√£o environment indica que caso a porta principal (8080 para uso local) esteja ocupada, o Spring ir√° atribuir
uma outra porta automaticamente. */

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
/* A anota√ß√£o @TestInstance indica que o Ciclo de vida da Classe de Teste ser√° por Classe. */
public class UsuarioControllerTest {

    @Autowired
    private TestRestTemplate testRestTemplate;
    /* Foi injetado (@Autowired), um objeto da Classe TestRestTemplate para enviar as requisi√ß√µes para a nossa aplica√ß√£o. */

    @Autowired
    private UsuarioService usuarioService;
    /* foi injetado (@Autowired), um objeto da Classe UsuarioService para persistir os objetos no
    Banco de dados de testes com a senha criptografada. */
    @Autowired
    private UsuarioRepository usuarioRepository;
    /* Foi injetado (@Autowired), um objeto da Interface UsuarioRepository para limpar o Banco de dados de testes. */

    @BeforeAll
    void start() {
        /* o M√©todo start(), anotado com a anota√ß√£o @BeforeAll, apaga todos os dados da tabela e cria o usu√°rio root@root.com
        para testar os M√©todos protegidos por autentica√ß√£o.  */

        usuarioRepository.deleteAll();

        usuarioService.cadastrarUsuario(new Usuario(0L,
                "Root", "root@root.com", "rootroot", " "));
    }

    @Test
    /* o M√©todo deveCriarUmUsuario() foi antotado com a anota√ß√£o @Test que indica que este M√©todo executar√° um teste. */

    @DisplayName("Cadastrar Um Usu√°rio")
    /* a anota√ß√£o @DisplayName configura uma mensagem que ser√° exibida ao inv√©s do nome do M√©todo. */
    public void deveCriarUmUsuario() {
        HttpEntity<Usuario> corpoRequisicao = new HttpEntity<Usuario>(new Usuario(0L,
                /* foi criado um objeto da Classe HttpEntity chamado requisicao, recebendo um objeto da Classe Usuario.
                Nesta etapa, o processo √© equivalente ao que o Postman faz em uma requisi√ß√£o do tipo POST: Transforma os Atributos
                num objeto da Classe Usuario, que ser√° enviado no corpo da requisi√ß√£o (Request Body). */

                "Paulo Antunes", "paulo_antunes@email.com.br", "13465278", "https://i.imgur.com/JR7kUFU.jpg"));
        ResponseEntity<Usuario> corpoResposta = testRestTemplate
                .exchange("/usuarios/cadastrar", HttpMethod.POST, corpoRequisicao, Usuario.class);
        /*A Requisi√ß√£o HTTP ser√° enviada atrav√©s do M√©todo exchange() da Classe TestRestTemplate e a Resposta da Requisi√ß√£o (Response)
        ser√° recebida pelo objeto resposta do tipo ResponseEntity. Para enviar a requisi√ß√£o, o ser√° necess√°rio passar 4 par√¢metros:
        A URI: Endere√ßo do endpoint (/usuarios/cadastrar);
        O M√©todo HTTP: Neste exemplo o M√©todo POST;
        O Objeto HttpEntity: Neste exemplo o objeto requisicao, que cont√©m o objeto da Classe Usuario;
        O conte√∫do esperado no Corpo da Resposta (Response Body): Neste exemplo ser√° do tipo Usuario (Usuario.class). */

        assertEquals(HttpStatus.CREATED, corpoResposta.getStatusCode());
        /* Atrav√©s do M√©todo de asser√ß√£o AssertEquals(), checaremos se a resposta da requisi√ß√£o (Response), √© a resposta esperada
        (CREATED ü°™ 201). Para obter o status da resposta vamos utilizar o M√©todo getStatusCode() da Classe ResponseEntity. */

        assertEquals(corpoRequisicao.getBody().getNome(), corpoResposta.getBody().getNome());
        assertEquals(corpoRequisicao.getBody().getUsuario(), corpoResposta.getBody().getUsuario());
/* Atrav√©s do M√©todo de asser√ß√£o AssertEquals(), checaremos se o nome e o usu√°rio(e-mail) enviados na requisi√ß√£o foram
persistidos no Banco de Dados. Atrav√©s do M√©todo getBody() faremos o acesso aos objetos requisi√ß√£o e resposta, que est√£o no
corpo (body) tanto da requisi√ß√£o quanto da resposta, e atrav√©s dos M√©todos getNome() e getUsuario() faremos o acesso aos
Atributos que ser√£o comparados. */
    }

    @Test
    @DisplayName("N√£o deve permitir duplica√ß√£o do Usu√°rio")
    public void naoDeveDuplicarUsuario() {

        usuarioService.cadastrarUsuario(new Usuario(0L,
                "Maria da Silva", "maria_silva@email.com.br", "13465278", "https://i.imgur.com/T12NIp9.jpg"));
        /* Atrav√©s do M√©todo cadastrarUsuario() da Classe UsuarioService, foi persistido um Objeto da Classe Usuario
        no Banco de dados (Maria da Silva). */

        HttpEntity<Usuario> corpoRequisicao = new HttpEntity<Usuario>(new Usuario(0L,
                "Maria da Silva", "maria_silva@email.com.br", "13465278", "https://i.imgur.com/T12NIp9.jpg"));
        /* Foi criado um objeto HttpEntity chamado requisicao, recebendo um objeto da Classe Usuario contendo
        os mesmos dados do objeto persistido na linha 60 (Maria da Silva). */

        ResponseEntity<Usuario> corpoResposta = testRestTemplate
                .exchange("/usuarios/cadastrar", HttpMethod.POST, corpoRequisicao, Usuario.class);
        /* A Requisi√ß√£o HTTP ser√° enviada atrav√©s do M√©todo exchange() da Classe TestRestTemplate e a Resposta da Requisi√ß√£o
        (Response) ser√° recebida pelo objeto resposta do tipo ResponseEntity. Para enviar a requisi√ß√£o, o ser√° necess√°rio passar 4 par√¢metros:
        A URI: Endere√ßo do endpoint (/usuarios/cadastrar);
        O M√©todo HTTP: Neste exemplo o M√©todo POST;
        O Objeto HttpEntity: Neste exemplo o objeto requisicao, que cont√©m o objeto da Classe Usuario;
        O conte√∫do esperado no Corpo da Resposta (Response Body): Neste exemplo ser√° do tipo Usuario (Usuario.class). */


        assertEquals(HttpStatus.BAD_REQUEST, corpoResposta.getStatusCode());
        /* Atrav√©s do M√©todo de asser√ß√£o AssertEquals(), checaremos se a resposta da requisi√ß√£o (Response), √© a resposta esperada
        (BAD_REQUEST ü°™ 400). Para obter o status da resposta vamos utilizar o M√©todo getStatusCode() da Classe ResponseEntity. */
    }
    /* Observe que neste M√©todo temos o objetivo de testar o Erro! (Usu√°rio Duplicado) e n√£o a persist√™ncia dos dados.
    Observe que enviamos o mesmo objeto 2 vezes e verificamos se o aplicativo rejeita a persist√™ncia do mesmo objeto
    pela segunda vez (BAD REQUEST).
    Como o teste tem por objetivo checar se est√° duplicando usu√°rios no Banco de dados, ao inv√©s de checarmos se o objeto foi
    persistido (CREATE ü°™ 201), checaremos se ele n√£o foi persistido (BAD_REQUEST ü°™ 400). Se retornar o Status 400, o teste ser√° aprovado! */

    @Test
    @DisplayName("Atualizar Um Usu√°rio")
    public void deveAtualizarUmUsuario() {

        Optional<Usuario> usuarioCadastrado = usuarioService.cadastrarUsuario(new Usuario(0L,
                "Juliana Andrews", "juliana_andrews@email.com.br", "juliana123", "https://i.imgur.com/yDRVeK7.jpg"));
/* foi criado um Objeto Optional, do tipo Usuario, chamado usuarioCreate, para armazenar o resultado da persist√™ncia
 de um Objeto da Classe Usuario no Banco de dados, atrav√©s do M√©todo cadastrarUsuario() da Classe UsuarioService. */

        Usuario usuarioUpdate = new Usuario(usuarioCadastrado.get().getId(),
                "Juliana Andrews Ramos", "juliana_ramos@email.com.br", "juliana123", "https://i.imgur.com/yDRVeK7.jpg");
        /* foi criado um Objeto do tipo Usuario, chamado usuarioUpdate, que ser√° utilizado para atualizar os dados persistidos no Objeto usuarioCreate. */

        HttpEntity<Usuario> corpoRequisicao = new HttpEntity<Usuario>(usuarioUpdate);
        /* foi criado um objeto HttpEntity chamado requisicao, recebendo o objeto da Classe Usuario chamado usuarioUpdate.
        Nesta etapa, o processo √© equivalente ao que o Postman faz em uma requisi√ß√£o do tipo PUT: Transforma os Atributos
        num objeto da Classe Usuario, que ser√° enviado no corpo da requisi√ß√£o (Request Body).  */

        ResponseEntity<Usuario> corpoResposta = testRestTemplate
                /* a Requisi√ß√£o HTTP ser√° enviada atrav√©s do M√©todo exchange() da Classe TestRestTemplate e a
                Resposta da Requisi√ß√£o (Response) ser√° recebida pelo objeto resposta do tipo ResponseEntity. Para enviar a requisi√ß√£o,
                o ser√° necess√°rio passar 4 par√¢metros:
                A URI: Endere√ßo do endpoint (/usuarios/atualizar);
                O M√©todo HTTP: Neste exemplo o M√©todo PUT;
                O Objeto HttpEntity: Neste exemplo o objeto requisicao, que cont√©m o objeto da Classe Usuario;
                O conte√∫do esperado no Corpo da Resposta (Response Body): Neste exemplo ser√° do tipo Usuario (Usuario.class).  */

                .withBasicAuth("root@root.com", "rootroot")
                /* como o Blog Pessoal est√° com o Spring Security habilitado com autentica√ß√£o do tipo Http Basic, o Objeto
                testRestTemplate dos endpoints que exigem autentica√ß√£o, dever√° efetuar o login com um usu√°rio e uma senha v√°lida para realizar
                os testes. Para autenticar o usu√°rio e a senha utilizaremos o M√©todo withBasicAuth(username, password) da Classe TestRestTemplate.
                Vamos utilizar o usu√°rio root@root.com, que foi criado no M√©todo start() para autenticar o nosso teste. */

                .exchange("/usuarios/atualizar", HttpMethod.PUT, corpoRequisicao, Usuario.class);

        assertEquals(HttpStatus.OK, corpoResposta.getStatusCode());
                /* Atrav√©s do M√©todo de asser√ß√£o AssertEquals(), checaremos se a resposta da requisi√ß√£o (Response),
                √© a resposta esperada (OK ü°™ 200). Para obter o status da resposta vamos utilizar o M√©todo getStatusCode()
                da Classe ResponseEntity.*/

        assertEquals(corpoRequisicao.getBody().getNome(), corpoResposta.getBody().getNome());
        assertEquals(corpoRequisicao.getBody().getUsuario(), corpoResposta.getBody().getUsuario());
                /* Atrav√©s do M√©todo de asser√ß√£o AssertEquals(), checaremos se o nome e o usu√°rio(e-mail) enviados na
                requisi√ß√£o usuarioUpdate foram persistidos no Banco de Dados. Atrav√©s do M√©todo getBody() faremos o acesso
                aos objetos usuarioUpdate e resposta que est√£o no corpo (body) tanto da requisi√ß√£o quanto da resposta, e atrav√©s dos
                M√©todos getNome() e getUsuario() faremos o acesso aos Atributos que ser√£o comparados.

                --> ATEN√á√ÉO: Para que o M√©todo deveAtualizarUmUsuario() seja aprovado, os 3 testes (linhas 90 a 92) devem ser aprovados,
                caso contr√°rio o JUnit indicar√° que o teste Falhou! */
    }

    @Test
    @DisplayName("Listar todos os Usu√°rios")
    public void deveMostrarTodosOsUsuarios() {

        usuarioService.cadastrarUsuario(new Usuario(0L,
                "Sabrina Sanches", "sabrina_sanches@email.com.br", "sabrina123", "https://i.imgur.com/5M2p5Wb.jpg"));

        usuarioService.cadastrarUsuario(new Usuario(0L,
                "Ricardo Marques", "ricardo_marques@email.com.br", "ricardo123", "https://i.imgur.com/Sk5SjWE.jpg"));
        /* foram persistidos dois Objetos da Classe Usuario no Banco de dados, atrav√©s do M√©todo cadastrarUsuario() da Classe UsuarioService. */

        ResponseEntity<String> resposta = testRestTemplate
                /* a Requisi√ß√£o HTTP ser√° enviada atrav√©s do M√©todo exchange() da Classe TestRestTemplate e a Resposta da Requisi√ß√£o (Response)
                ser√° recebida pelo objeto resposta do tipo ResponseEntity. Para enviar a requisi√ß√£o, o ser√° necess√°rio passar 4 par√¢metros:
                A URI: Endere√ßo do endpoint (/usuarios/all);
                O M√©todo HTTP: Neste exemplo o M√©todo GET;
                O Objeto HttpEntity: O objeto ser√° nulo (null). Requisi√ß√µes do tipo GET n√£o enviam Objeto no corpo da requisi√ß√£o;
                O conte√∫do esperado no Corpo da Resposta (Response Body): Neste exemplo como o objeto da requisi√ß√£o √© nulo,
                a resposta esperada ser√° do tipo String (String.class). */

                .withBasicAuth("root@root.com", "rootroot")
                /* Observe que na linha 111, como o Blog Pessoal est√° com o Spring Security habilitado com autentica√ß√£o do tipo Http Basic,
                o Objeto testRestTemplate dos endpoints que exigem autentica√ß√£o, dever√° efetuar o login com um usu√°rio e uma senha v√°lida
                para realizar os testes. Para autenticar o usu√°rio e a senha utilizaremos o M√©todo withBasicAuth(username, password) da
                Classe TestRestTemplate. Vamos utilizar o usu√°rio root@root.com, que foi criado no M√©todo start() para autenticar o nosso teste. */

                .exchange("/usuarios/all", HttpMethod.GET, null, String.class);

        assertEquals(HttpStatus.OK, resposta.getStatusCode());
    }
}
/* A atrav√©s do M√©todo de asser√ß√£o AssertEquals(), checaremos se a resposta da requisi√ß√£o (Response), √© a resposta esperada
    (OK ü°™ 200). Para obter o status da resposta vamos utilizar o M√©todo getStatusCode() da Classe ResponseEntity. */