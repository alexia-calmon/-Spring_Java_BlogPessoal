package com.generation.blogpessoal.controller;

import com.generation.blogpessoal.model.Postagem;
import com.generation.blogpessoal.repository.PostagemRepository;
import com.generation.blogpessoal.repository.TemaRepository;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;
import java.util.Optional;

@RestController
/* Define que a Classe √© do tipo RestController e receber√° requisi√ß√µes compostas por URL (endpoint), Verbo (m√©todo HTTP) e Corpo da Requisi√ß√£o (Request Body), objeto
que cont√©m os dados que ser√£o persistidos no banco de dados. Nem toda requisi√ß√£o enviar√° dados no Request Body.
Ao receber a requisi√ß√£o, a classe Controladora responser√° com: um c√≥digo de status HTTP pertinente a opera√ß√£o realizada e o resultado do processamento
((Objetos de uma Classe, por exemplo) inserido diretamente no corpo da resposta (Response Body) */

@RequestMapping("/postagens")
/* √â usada para mapear as solicita√ß√µes para os m√©todos da classe controladora PostagemController (definir a URL padr√£o do Recurso (/postagens)).
Ao digitar a URL do servidor seguida da URL do Recurso (http://localhost:8080/postagens),
o Spring envia a requisi√ß√£o para a Classe respons√°vel pelo Recurso associado √† este endere√ßo. */

@CrossOrigin(origins = "*", allowedHeaders = "*")
/* Indica que a classe controladora permitir√° o recebimento de requsi√ß√µes realizadas de fora do dom√≠nio (localhost ou heroku) ao qual ela pertence.
√â essencial para que o front-end tenha acesso √† aplica√ß√£o (construir a API). Al√©m de liberar todas as origens das requisi√ß√µes (par√¢metro origins), a anota√ß√£o
libera tamb√©m os Cabe√ßalhos das Requisi√ß√µes (allowedHeaders), que trazem infos essenciais para o correto funcionamento da aplica√ß√£o.
Em produ√ß√£o, recomenda-se substituir o * pelo endere√ßo do deploy do front. */
public class PostagemController {
    @Autowired
    /* Inje√ß√£o de Depend√™ncia - √â a implementa√ß√£o utilizada pelo Spring para aplicar a Invers√£o de Controle (IoC) quando necess√°rio. Ela define quais Classes
    ser√£o instanciadas e em quais lugares ser√£o Injetadas quando necess√°rio. */
    private PostagemRepository postagemRepository;
    /*A classe Controladora cria um ponto de inje√ß√£o da Interface PostagemRepository e quando houver necessidade, o Spring cria um novo Objeto da Classe Postagem
a partir da Interface PostagemRepository, permitindo o uso de todos os M√©todos da Interface (Padr√£o ou Personalizados), sem a necessidade de criar
M√©todos Construtores na Classe Model ou Criar/Instaciar Objetos de forma manual. Transferimos a responsabilidade disso, para o Spring e focamos nas Requisi√ß√µes. */

    @Autowired
    private TemaRepository temaRepository;
    /* Para termos acesso aos M√©todos das Classes Tema e TemaController, precisamos inserir uma uma Inje√ß√£o de Depend√™ncia dio Recurso Tema,
     logo abaixo da uma Inje√ß√£o de Depend√™ncia do Recurso Postagem. */


    /*Vamos implementar o M√©todo getAll() na Classe Postagem Controller, que retornar√° todos os Objetos da Classe Postagem persistidos no Banco de dados.
    Tra√ßando um paralelo com o MySQL, seria o equivalente a instru√ß√£o: SELECT * FROM tb_postagens; */
    @GetMapping
    /* A anota√ß√£o @GetMapping mapeia todas as Requisi√ß√µes HTTP GET, enviadas para um endere√ßo espec√≠fico, chamado endpoint, dentro do Recurso Postagem,
    para um M√©todo espec√≠fico que responder√° a requisi√ß√£o, ou seja, ele indica que o M√©todo getAll(), responder√° a todas as requisi√ß√µes do tipo HTTP GET,
    enviadas no endere√ßo http://localhost:8080/postagens/. */

    public ResponseEntity<List<Postagem>> getAll() {
        /* O M√©todo getAll() ser√° do tipo ResponseEntity pq ele responder√° a Requisi√ß√£o HTTP (HTTP Request), com uma Resposta HTTP (HTTP Response).
        <list<Postagem>>: O M√©todo al√©m de retornar um Objeto da Classe ResponseEntity (OK=200), no par√¢metro body (Corpo da Resposta),
        ser√° retornado um Objeto da Classe List (Collection), contendo todos os Objetos da Classe postagem persistidos no Banco de Dados, na tabela tb_postagens.
        Usamos aqui nessa linha 46, o recurso Java Generics, que al√©m de simplificar o retorno do Objeto da Classe List, dispensa o uso do casting (mudan√ßa de tipos).
        Na defini√ß√£o do M√©todo, foram usados os s√≠mbolos, onde T √© o tipo do objeto que ser√° retornado no Corpo da Resposta. */

        return ResponseEntity.ok(postagemRepository.findAll());
        /* Executa o M√©todo findAll() (M√©todo padr√£o da Interface JpaRepository), que retornar√° todos os Objetos da Classe Postagem persistidos no Banco de dados
        (<List<Postagem>>. Como a List sempre ser√° gerada (vazia ou n√£o), o M√©todo sempre retornar√° o Status 200=OK */
    }

    /*Vamos implementar o M√©todo getById(Long id) na Classe Postagem Controller, que retornar√° um Objeto espec√≠fico persistido no Banco de dados, identificado
    pelo id (Identificador √∫nico do Objeto). Tra√ßando um paralelo com o MySQL, seria o equivalente a instru√ß√£o: SELECT * FROM tb_postagens where id = id;
    Para processar o M√©todo findById(Long id), vamos utilizar dois recursos da Linguagem Java, que tornam o c√≥digo mais limpo e assertivo:
    S√£o os recursos Optional e Express√µes Lambda. */
    @GetMapping("/{id}")
    /*A anota√ß√£o @GetMapping("/{id}") mapeia todas as Requisi√ß√µes HTTP GET, enviadas para um endere√ßo espec√≠fico (Endpoint), dentro do Recurso Postagem,
    para um M√©todo espec√≠fico que responder√° as requisi√ß√µes, ou seja, ele indica que o M√©todo getById( Long id ), responder√° a todas as requisi√ß√µes
    do tipo HTTP GET, enviadas no endere√ßo http://localhost:8080/postagens/id, onde id √© uma Vari√°vel de Caminho (Path Variable), que receber√° o id da
    Postagem que ser√° Consultada. */

    public ResponseEntity<Postagem> getById(@PathVariable Long id) {
        /*O M√©todo getById(@PathVariable Long id) ser√° do tipo ResponseEntity porque ele responder√° Requisi√ß√µes HTTP (HTTP Request), com uma Resposta HTTP
        (HTTP Response). Observe que o M√©todo possui um par√¢metro do tipo Long, chamado id.
        @PathVariable Long id: Esta anota√ß√£o insere o valor enviado no endere√ßo do endpoint, na Vari√°vel de Caminho {id}, no par√¢metro do M√©todo getById( Long id )
        Ex.: http://localhost:8080/postagens/1 (o par√¢metro Long id, do M√©todo getById( Long id ), receber√° o valor 1 (Id que ser√° procurado em tb_postagens))
        <Postagem> O M√©todo al√©m de retornar um objeto da Classe ResponseEntity (OKü°™200), no par√¢metro Body (Corpo da Resposta), ser√° retornado Um Objeto da
        Classe Postagem, apenas e somente se o Objeto procurado for encontrado no Banco de dados, na tabela tb_postagens. Nesta linha tamb√©m foi utilizado o
        recurso Java Generics para simplificar o retorno do Objeto. */

        return postagemRepository.findById(id)
                /* Retorna a execu√ß√£o do M√©todo findById(id), que √© um M√©todo padr√£o da Interface JpaRepository. O M√©todo retornar√° um Objeto da Classe Postagem
                persistido no Banco de dados (source: imgur.com), caso ele seja encontrado a partir do par√¢metro Long id. Caso contr√°rio, ser√° retornado um Objeto Nulo.*/
                .map(resposta -> ResponseEntity.ok(resposta))
                /* Se o Objeto da Classe Postagem for econtrado, o M√©todo map (Optional), mapeia no Objeto resp o Objeto Postagem retornado pelo M√©todo findById(id)),
                 insere o Objeto mapeado no Corpo da Resposta do M√©todo ResponseEntity.ok(resp); e retorna o HTTP Status OKü°™200. */
                .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());
                /*Se o Objeto Postagem n√£o for encontrado (Nulo), ser√° retornado o HTTP Status NOT FOUND ü°™ 404 (N√£o Encontrado!).
                O M√©todo build() constr√≥i a Resposta com o HTTP Status retornado.
                 */
    }

    @GetMapping("/titulo/{titulo}")
    /*A anota√ß√£o @GetMapping indica que o M√©todo getAll(), responder√° a todas as requisi√ß√µes do tipo HTTP GET, enviadas no endere√ßo
     http://localhost:8080/postagens/titulo/postagem.

     */
    public ResponseEntity<List<Postagem>> getByTitulo(@PathVariable String titulo) {
        /*<List<Postagem>>: Al√©m de retornar um objeto da Classe ResponseEntity (OK=200) no body, retornar√° um Objeto da Classe List (Collection),
        que cont√©m todos os objetos da classe postagem persistidos no BDD na tabela tb_postagem e o atributo tenha a String enviada como par√¢metro. */

        return ResponseEntity.ok(postagemRepository.findAllByTituloContainingIgnoreCase(titulo));
        /* Executa o M√©todo findAllByTituloContainingIgnoreCase(String titulo) (M√©todo personalizado, criado na Interface PostagemRepository), e exibe o resultado
        (<list<Postagem>>, no corpo da Resposta. Como a List sempre ser√° gerada sendo vazia ou n√£o, o M√©todo sempre vai retornar Status 200=OK. */
    }

    /*Vamos implementar o M√©todo post(Postagem postagem) na Classe Postagem Controller. Tra√ßando um paralelo com o MySQL, seria o equivalente a
    instru√ß√£o: INSERT INTO tb_postagens (titulo, texto, data) VALUES ("T√≠tulo", "Texto", CURRENT_TIMESTAMP()); */
    @PostMapping
    /*a anota√ß√£o @PostMapping indica que o M√©todo post(Postagem postagem), responder√° a todas as requisi√ß√µes do tipo HTTP POST,
    enviadas no endere√ßo http://localhost:8080/postagens*/

    public ResponseEntity<Postagem> post(@Valid @RequestBody Postagem postagem) {
        /*O M√©todo ResponseEntity<Postagem>post(@Valid @RequestBody postagem postagem) ser√° do tipo ResponseEntity porque ele responder√°
        Requisi√ß√µes HTTP com uma Resposta HTTP. O M√©todo possui um par√¢metro, que √© um Objeto da Classe Postagem, chamado postagem.

        @Valid: Valida o Objeto postagem enviado no Corpo da Requisi√ß√£o, conforme as regras definidas no Model postagem (@NotNull, @NotBlank, @Size, etc)

        @RequestBody Postagem postagem: Recebe o Objeto do tipo Postagem enviado no Corpo da Requisi√ß√£o e insere no par√¢metro Postagem no m√©todo post.*/

        if (temaRepository.existsById(postagem.getTema().getId()))
            /* Atrav√©s do M√©todo existsById(Long id), da Interface TemaRepository (Heran√ßa da Interface JPA), checamos se o id passado no Objeto tema, da Classe Tema, inserido no Objeto postagem, da Classe Postagem, existe.
            Para obter o id do tema, utilizamos os M√©todos get das 2 Classes: postagem.getTema().getId() */

            return ResponseEntity.status(HttpStatus.CREATED)
                    .body(postagemRepository.save(postagem));
            /* Executa o M√©todo padr√£o da Interface JpaRepository (save(postagem)), se o Objeto tema existir, e retorna o HTTP Status CREATEDü°™201
             se o Objeto foi persistido no Banco de dados. */

        return ResponseEntity.status(HttpStatus.CREATED)
                .body(postagemRepository.save(postagem));
        /*Se o Objeto tema n√£o for encontrado pelo M√©todo existsById(Long id), ser√° retornado o HTTP Status BAD REQUEST ü°™ 400.
        O M√©todo build() constr√≥i a Resposta com o HTTP Status retornado. */
    }
    /*Vamos implementar o M√©todo put(Postagem postagem) na Classe Postagem Controller. Observe que ele √© muito parecido com o M√©todo post.
    Tra√ßando um paralelo com o MySQL, seria o equivalente a instru√ß√£o:
    UPDATE tb_postagens SET titulo = "titulo", texto = "texto", data = CURRENT_TIMESTAMP() WHERE id = id; */

    @PutMapping
    /* A anota√ß√£o @PutMapping indica que o M√©todo put(Postagem postagem), responder√° a todas as requisi√ß√µes do tipo HTTP PUT,
    enviadas no endere√ßo http://localhost:8080/postagens */

    public ResponseEntity<Postagem> put(@Valid @RequestBody Postagem postagem) {
        if (postagemRepository.existsById(postagem.getId())) {
            /* Atrav√©s do M√©todo existsById(Long id), da Interface PostagemRepository (Heran√ßa da Interface JPA), checamos se o id passado no
            Objeto postagem, da Classe Postagem, existe. Caso o Objeto n√£o exista, n√£o √© poss√≠vel atualizar. */

            if (temaRepository.existsById(postagem.getTema().getId()))
                /* Atrav√©s do M√©todo existsById(Long id), da Interface TemaRepository (Heran√ßa da Interface JPA), checamos se o id passado no
                Objeto tema, da Classe Tema, inserido no Objeto postagem, da Classe Postagem, existe.
                Para obter o id do tema, utilizamos os M√©todos get das 2 Classes: postagem.getTema().getId() */

                return ResponseEntity.status(HttpStatus.OK)
                        /* Executa o M√©todo padr√£o da Interface JpaRepository (save(postagem)), se o Objeto tema existir,
                        e retorna o HTTP Status OK=200 se o Objeto foi atualizado no Banco de dados. */
                        .body(postagemRepository.save(postagem));

            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
            /* Se o Objeto tema n√£o for encontrado pelo M√©todo existsById(Long id), ser√° retornado o HTTP Status BAD REQUEST = 400.
            O M√©todo build() constr√≥i a Resposta com o HTTP Status retornado. */
        }


        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        /* Se o Objeto Postagem n√£o for encontrado pelo M√©todo existsById(Long id), ser√° retornado o HTTP Status NOT FOUND = 404 (N√£o Encontrado!),
        indicando que a Postagem n√£o existe. O M√©todo build() constr√≥i a Resposta com o HTTP Status retornado. */
    }

    /* Vamos implementar o M√©todo delete(Long id) na Classe Postagem Controller. Tra√ßando um paralelo com o MySQL,
    seria o equivalente a instru√ß√£o: DELETE FROM tb_postagens WHERE id = id;. */
    @ResponseStatus(HttpStatus.NO_CONTENT)
    /*Indica que o M√©todo delete(Long id), ter√° uma ResponseStatus espec√≠fica. Quando a Resposta da Requisi√ß√£o for positiva, ser√° retornado o
    HTTP Status NO_CONTENT = 204, ao inv√©s do HTTP Status OK=200 como resposta padr√£o. */

    @DeleteMapping("/{id}")
    /* Mapeia todas as Requisi√ß√µes HTTP DELETE enviadas para um endere√ßo espec√≠fico (EndPoint), dentro do Recurso Postagem, para um M√©todo espec√≠fico
    que responder√° as requisi√ß√µes, ou seja, ele indica que o M√©todo delete (Long id), responder√° a todas as requisi√ß√µes do tipo HTTP DELETE,
    enviadas no endere√ßo http://localhost:8080/postagens/id, onde id √© uma Vari√°vel de Caminho (Path Variable),
     que receber√° o id da Postagem que ser√° Deletada. */

    public void delete(@PathVariable Long id) {
        /* O M√©todo void delete(@PathVariable Long id) ser√° do tipo void porque ele responda Requisi√ß√µes HTTP (HTTP Request), ao deletar uma
        Postagem ela deixa de existir, logo n√£o tem nenhum tipo de retorno. Como configuramos a anota√ß√£o @ResponseStatus, ele devolver√° uma
        Resposta HTTP NO_CONTENT ü°™ 204, indicando que o Objeto deletado n√£o existe mais. Observe que o M√©todo possui um par√¢metro do tipo Long, chamado id.

        @PathVariable Long id: Esta anota√ß√£o insere o valor enviado no endere√ßo do endpoint, na Vari√°vel de Caminho {id},
        no par√¢metro do M√©todo delete( Long id ); */

        Optional<Postagem> postagem = postagemRepository.findById(id);
/*Cria um Objeto Optional da Classe Postagem chamado postagem, que receber√° o resultado do M√©todo findById(id).
Como o M√©todo pode retornar um Objeto Nulo, utilizaremos o Optional para evitar o erro NullPointerException. Ao ao inv√©s de utilizarmos o map
com as Express√µes Lambda, utilizaremos o Optional. */

        if (postagem.isEmpty())
            throw new ResponseStatusException(HttpStatus.NOT_FOUND);
        /* Atrav√©s da estrutura condicional if, checamos se o Objeto postagem est√° vazio (postagem.isEmpty()). Se estiver, geramos um
             HTTP Status NOT FOUND ü°™ 404 (N√£o Encontrado!) e como estamos utilizando um Objeto da Classe ResponseStatusException
             (throw new ResponseStatusException(HttpStatus.NOT_FOUND);), as pr√≥ximas linhas do M√©todo ser√£o ignoradas.  */

        postagemRepository.deleteById(id);
        /*Executa o M√©todo padr√£o da Interface JpaRepository deleteById(Long id) e retorna o HTTP Status NO_CONTENT ü°™ 204, HTTP Status padr√£o do M√©todo*/
    }
}